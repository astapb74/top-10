<?php

namespace app\models;

use Yii;
use \yii\helpers\ArrayHelper;

/**
 * This is the model class for table "books".
 *
 * @property int $id
 * @property string $name
 * @property int $image_id
 * @property string $desc
 * @property string $isbn
 * @property int $dt
 *
 * @property Images $image
 * @property BooksHasAutor[] $booksHasAutors
 * @property array $autorIds
 */
class Books extends \yii\db\ActiveRecord
{

    private $_autorIds = null;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'books';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'image_id', 'autorIds', 'desc', 'dt', 'isbn'], 'required'],
            [['image_id', 'dt'], 'integer'],
            [['name'], 'string', 'max' => 120],
            [['isbn'], 'string', 'max' => 100],
            [['desc'], 'string'],
            [['image_id'], 'exist', 'skipOnError' => true, 'targetClass' => Images::className(), 'targetAttribute' => ['image_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'       => 'ID',
            'name'     => 'Наименование',
            'image_id' => 'Картинка',
            'desc'     => 'Описание',
            'isbn'     => 'isbn',
            'dt'       => 'Год издания',
            'autorIds' => 'Авторы',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getImage()
    {
        return $this->hasOne(Images::className(), ['id' => 'image_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBooksHasAutors()
    {
        return $this->hasMany(BooksHasAutor::className(), ['book_id' => 'id'])
            ->with('autor');
    }

    /**
     * @return array|null
     */
    public function getAutorIds()
    {
        if (is_null($this->_autorIds)) {
            $this->_autorIds = ArrayHelper::map(($this['booksHasAutors'] ? $this['booksHasAutors'] : BooksHasAutor::findAll(['book_id' => $this->id])), 'autor_id', 'autor_id');
        }

        return $this->_autorIds;
    }

    /**
     * @param $autorIds
     * @return array|null
     */
    public function setAutorIds($autorIds)
    {
        $this->_autorIds = $autorIds;

        return $this->_autorIds;
    }

    /**
     * @return array|\yii\db\ActiveRecord[]
     */
    public function getAutors()
    {
        $autors = [];
        if ($this['booksHasAutors']) {
            foreach($this['booksHasAutors'] as $autor) {
                $autors[] = $autor['autor'];
            }
        }
        else {
            $autors = Autors::find()
                ->innerJoin(BooksHasAutor::tableName() . ' bha', 'bha.autor_id = ' . Autors::tableName() . '.id')
                ->where(['bha.book_id' => $this->id])
                ->all();
        }

        return $autors;
    }

    /**
     * @param bool $insert
     * @return bool
     */
    public function afterSave($insert, $changedAttributes)
    {
        BooksHasAutor::deleteAll(['book_id' => $this->id]);
        if (!is_null($this->_autorIds)) {
            foreach ($this->_autorIds as $autorId) {
                $bha = new BooksHasAutor();
                $bha->autor_id = $autorId;
                $bha->book_id = $this->id;
                $bha->save();
            }
        }

        return parent::beforeSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
